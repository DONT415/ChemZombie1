Node* insert(Node* head, int value)
{
    // Your code here
    Node* newNode = new Node();
    newNode->value = value;
    newNode->next = nullptr;
    
    // Case 1: Empty list or insert before head
    if (head == nullptr || value < head->value) {
        newNode->next = head;
        return newNode;
    }
    
    // Case 2: Insert in the middle or end
    Node* current = head;
    while (current->next != nullptr && current->next->value < value) {
        current = current->next;
    }
    
    newNode->next = current->next;
    current->next = newNode;
    return head;
}

Node* deleteNode(Node* head, int pos)
{
    // Your code here
    if (head == nullptr)
        return nullptr;
    
    // Case 1: Delete the head node
    if (pos == 0) {
        Node* temp = head;
        head = head->next;
        delete temp;
        return head;
    }
    
    // Case 2: Delete a node after the head
    Node* current = head;
    int count = 0;
    while (count < pos - 1 && current->next != nullptr) {
        current = current->next;
        count++;
    }
    
    if (current == nullptr || current->next == nullptr) {
        return head;
    }
    
    Node* temp = current->next;
    current->next = temp->next;
    delete temp;
    return head;   
}
